diff --git a/testing/mochitest/tests/SimpleTest/EventUtils.js b/testing/mochitest/tests/SimpleTest/EventUtils.js
index 35fba10e3305cff711be12202499c3afbb4696f7..54a32b7050d371f3d930008c67595cea8c64ece1 100644
--- a/testing/mochitest/tests/SimpleTest/EventUtils.js
+++ b/testing/mochitest/tests/SimpleTest/EventUtils.js
@@ -1657,22 +1657,26 @@ function synthesizeAndWaitNativeMouseMove(
  * @param {number} [aEvent.repeat]
  *        If you emulate auto-repeat, you should set the count of repeat.
  *        This method will automatically synthesize keydown (and keypress).
- * @param {*} aEvent.location
+ * @param {boolean} [aEvent.ctrlKey]
+ *        Customise the `ctrlKey` modifier.
+ * @param {boolean} [aEvent.shiftKey]
+ *        Customise the `shiftKey` modifier.
+ * @param {*} [aEvent.location]
  *        If you want to specify this, you can specify this explicitly.
  *        However, if you don't specify this value, it will be computed
  *        from code value.
- * @param {String} aEvent.type
+ * @param {String} [aEvent.type]
  *        Basically, you shouldn't specify this.  Then, this function will
  *        synthesize keydown (, keypress) and keyup.
  *        If keydown is specified, this only fires keydown (and keypress if
  *        it should be fired).
  *        If keyup is specified, this only fires keyup.
- * @param {number} aEvent.keyCode
+ * @param {number} [aEvent.keyCode]
  *        Must be 0 - 255 (0xFF). If this is specified explicitly,
  *        .keyCode value is initialized with this value.
  * @param {DOMWindow} [aWindow=window]
  *        DOM window used to dispatch the event.
- * @param {Function} aCallback
+ * @param {Function} [aCallback]
  *        Is optional and can be used to receive notifications from TIP.
  *
  * @description
@@ -3532,9 +3536,9 @@ function _computeSrcElementFromSrcSelection(aSrcSelection) {
  * @param {Element} aParams.srcElement
  *                The element to start dragging.  If srcSelection is
  *                set, this is computed for element at focus node.
- * @param {Selection|nil} aParams.srcSelection
+ * @param {Selection|null} aParams.srcSelection
  *                The selection to start to drag, set null if srcElement is set.
- * @param {Element|nil} aParams.destElement
+ * @param {Element|null} aParams.destElement
  *                The element to drop on. Pass null to emulate a drop on an invalid target.
  * @param {number} aParams.srcX
  *                The initial x coordinate inside srcElement or ignored if srcSelection is set.
@@ -3548,7 +3552,7 @@ function _computeSrcElementFromSrcSelection(aSrcSelection) {
  *                The final x coordinate inside srcElement
  * @param {number} aParams.finalY
  *                The final x coordinate inside srcElement
- * @param {Any} aParams.id
+ * @param {any} aParams.id
  *                The pointer event id
  * @param {DOMWindow} aParams.srcWindow
  *                The DOM window for dispatching event on srcElement, defaults to the current window object.
@@ -4161,7 +4165,7 @@ async function synthesizePlainDragAndCancel(
  *                targetElement.  Default is sourceBrowsingCxt.
  * @param {Element} aParams.srcElement
  *                The element to drag.
- * @param {Element|nil} aParams.targetElement
+ * @param {Element|null} aParams.targetElement
  *                The element to drop on.
  * @param {number} aParams.step
  *                The 2D step for mousemoves
