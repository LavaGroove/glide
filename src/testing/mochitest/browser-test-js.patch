diff --git a/testing/mochitest/browser-test.js b/testing/mochitest/browser-test.js
index 979c6a0960cb8c490b612649d0fac55cd7b7d0f7..504a69289e04ae6a355e3febabc8ba6f0586d3c2 100644
--- a/testing/mochitest/browser-test.js
+++ b/testing/mochitest/browser-test.js
@@ -244,6 +244,16 @@ function Tester(aTests, structuredLogger, aCallback) {
   this.PerTestCoverageUtils = ChromeUtils.importESModule(
     "resource://testing-common/PerTestCoverageUtils.sys.mjs"
   ).PerTestCoverageUtils;
+  // glide-injection-start
+  this.GlideTestUtils = ChromeUtils.importESModule(
+    "resource://testing-common/GlideTestUtils.sys.mjs",
+    { global: "current" }
+  ).GlideTestUtils;
+  this.GlideEventUtils = ChromeUtils.importESModule(
+    "chrome://glide/content/event-utils.mjs",
+    { global: "current" }
+  );
+  // glide-injection-end
 
   this.PromiseTestUtils.init();
 
@@ -1372,6 +1382,15 @@ Tester.prototype = {
     scope.BrowserTestUtils = this.BrowserTestUtils;
     scope.TestUtils = this.TestUtils;
     scope.ExtensionTestUtils = this.ExtensionTestUtils;
+
+    // glide-injection-start
+    scope.GlideEventUtils = this.GlideEventUtils;
+    scope.keys = scope.GlideEventUtils.synthesize_keyseq;
+
+    scope.GlideTestUtils = this.GlideTestUtils;
+    this.GlideTestUtils.__load_globals(scope);
+    // glide-injection-end
+
     // Pass a custom report function for mochitest style reporting.
     scope.Assert = new this.Assert(function (err, message, stack) {
       currentTest.addResult(
@@ -1722,6 +1741,16 @@ function testScope(aTester, aTest, expected) {
       self.record(condition, name);
     }
   };
+  // glide-injection-start
+  this.notok = function test_notok(condition, name) {
+    if (arguments.length > 2) {
+      const ex = "Too many arguments passed to notok(condition, name)`.";
+      self.record(false, name, ex);
+    } else {
+      self.record(!condition, name);
+    }
+  };
+  // glide-injection-end
   this.record = function test_record(condition, name, ex, stack, expected) {
     if (expected == "fail") {
       aTest.addResult(
@@ -1755,6 +1784,18 @@ function testScope(aTester, aTest, expected) {
       Components.stack.caller
     );
   };
+  // glide-injection-start
+  this.isjson = function test_is(a, b, name) {
+    self.is(
+      JSON.stringify(a, typeof a === "object" ? Object.keys(a).sort() : null),
+      JSON.stringify(b, typeof b === "object" ? Object.keys(b).sort() : null),
+      name
+    );
+  };
+  // this.keys = async keyseq => {
+  //   await this.GlideTestUtils(keyseq);
+  // };
+  // glide-injection-start
   this.isfuzzy = function test_isfuzzy(a, b, epsilon, name) {
     self.record(
       a >= b - epsilon && a <= b + epsilon,
@@ -1939,6 +1980,17 @@ function testScope(aTester, aTest, expected) {
     }
   };
 
+  // glide-injection-start
+  this.sleep_frames = async function sleep_frames(count) {
+    for (let i = 0; i < count; i++) {
+      await new Promise(r => requestAnimationFrame(r));
+    }
+  };
+  this.sleep_forever = async function sleep_frames() {
+    await this.sleep_frames(999999999999999);
+  };
+  // glide-injection-end
+
   this.requestCompleteLog = function test_requestCompleteLog() {
     self.__tester.structuredLogger.deactivateBuffering();
     self.registerCleanupFunction(function () {
@@ -1977,6 +2029,10 @@ testScope.prototype = {
   TestUtils: null,
   ExtensionTestUtils: null,
   Assert: null,
+  // glide-injection-start
+  GlideTestUtils: null,
+  GlideEventUtils: null,
+  // glide-injection-end
 
   /**
    * Add a function which returns a promise (usually an async function)
